You've seen this in previous undergraduate HCI.  Uh, so just bringing back what it is that,  that we're interested in and why we're interested in Fitts law and some of some  of the impact that Fitz Law has on design and the interactions that we have.  And, and really why it's it's, you know, one, one of the most important laws that that we work with in,  in HCI, um, I guess important because it's really one of the only, um, analytical measures that we have.  Uh, as you all know, with HCI, a lot of us qualitative, um, a lot of it is, is really applying heuristics and understanding the impact of heuristics.  And that's often very difficult in terms of getting certainty around what's there.  This law is one of the laws that we have, which gives us group certainty about what's going to happen with the interfaces that we have.  And it gives us that certainty by understanding movement times across a device.  And that's any sort of device, human movement times.  Um, and so understanding how effective people can be with a particular interface,  and it gives us ways of understanding what we might do in change with our interface to improve the effectiveness of that.  Um, there are other laws, and you may remember them, uh, which give us ways of understanding some other aspects.  So the home hit crime and law, uh, for making decisions.  Uh, but really there are very few analytical measurements that, that we have inside HCI.  And so the very basics of it, um, as you to remember, I'm sure, um,  the time to get to a target is dependent on the distance you have to move and the width of the target.  And I think for most people that that makes a lot of sense.  Yeah. The further you have to go, the longer it's going to take, the bigger your target is, uh, the easier it is going to be to hit it.  Yeah. So, uh, you'll see that it's distance over width, as is the calculation that we're making.  And so as the distance increases, that value increases.  As the width increases, that value decreases. So, um, would match your intuition.  I would hope how that works. The interesting bit of it is that there's a log function on that.  Okay. So we don't move in a linear fashion from one place to another place.  Okay. We are better than that. So we move very quickly as we try and attain a target and then slow down as we move closer to that target.  Uh, which means that there's a log function on, on the time to attain a target.  Okay. Uh, which is really useful because otherwise it would be very slow for us to,  to move around the screens and, and manipulate any of the devices that we want to manipulate.  Uh, you remember there are, uh, two contestants in there which, uh, based on particular uses.  Um, so A and B, the variables there, uh, represent the time that a particular individual will take,  or a group of individuals or a group of people on a particular device, uh, the time that they will take to attain that target.  And so those, those ones change. So the thing that doesn't change is, uh, the log function.  So the log of just and width. And that gives us, uh, an index of difficulty.  It tells us how difficult it is going to be to attain a particular target.  And that value is constant no matter who's doing it or what device we're on or any, any other factor that, that we might bring in.  Okay. So the index of difficulty is, is one factor that we look at.  And we use a lot to understand how difficult it will be to to get to a target.  And then those constants A and B give us information about how a particular user or  how a particular group will actually perform when they're attaining that target.  Uh, Fitzwater came from, uh, many, many years ago.  Uh, Paul Fitts, uh, psychologist, uh, during the war was looking at accidents, uh, by pilots.  And then as now, almost every time there's, uh, a plane accident, they say it's pilot error.  And what he found was that that's really not the case.  Uh, that many things that are being attributed to pilot error were because of the design of the cockpit that the pilot was on,  and so it was difficult. It was slow to get to a particular, uh, control that the pilot needed to get to, to perform a particular function.  And so some of the things that they were attributing to pilot error were really because of the layout of the cockpit.  And so, uh, from that study, he came up with this law which tells us, uh, what, what the time is for moving around.  And they say, uh, constant say.  And they vary. So every single one of you in this room will have a different A and B.  And so your, your ability to move how fast you can move, uh,  is going to be different from each one of you depending on what your reflexes, uh, are like.  Um, I'm really shaky. And so I move in a very different way to, to most people when they're moving.  And so my A and B will be very different from anyone else.  And so each of you has a unique A and B. And if we want to understand for you individually how long it would take you to reach your target on,  on your devices, then we'd have to do measurements,  uh, to work out what your A and B constants are for the particular device in the particular software that you're using.  The aim b a unique to you. They're also unique to every device.  Yeah. So if you're using a laptop or using laptops uh that you have a different and B on your laptop and you go to your mobile phone,  then you won't be using a desktop, a you won't be using a tablet to any other device that that you might use to using a screen in a car to using any,  any control that that you have, you would have a different and b.  And so again, if we wanted to know exactly what you can do on a laptop, we'd have to measure on a laptop.  We want to know exactly what you can do on a mobile phone. We'd have to measure your performance on a mobile phone.  I think you get the message. It's it becomes quite, quite difficult.  It's also true for different types of software. And so your A and B constants will change depending on which piece of software you're using.  And it's different for the modes of pointing.  So if you're using a mouse versus using um a pen on a surface versus using your finger or anything else,  it might be using uh your A and B will change as well.  So you might be thinking, well that's useless.  And what can I do if that changes for absolutely everything that I'm looking at and for absolutely every person that we might look at.  And of course, what we do is as we take, um, a statistical average of, of users in a particular situation.  So we might look at the population of students and say, well, you know, using laptops, uh, students between  and ,  uh, the average A and B values, uh, this and, and we could use that to represent a population.  And we can look at, uh, people who use laptops versus people who use mobile phones.  And again, we can get a statistical approach off of the A and B for people who use mobile phones versus people who use laptops.  And again, apply those when we're making decisions on those devices or software or pointing device or any other, um, aspect that we're interested in.  Okay, that all makes sense. So I say the index of difficulty is is a really interesting one and a useful one for us.  So, um, that tells us how difficult it is to attain a target independent of who it is, what device, what point to what software.  Okay, so the index of difficulty is, um, is independent of all of those variables and gives us an indication of just  how difficult it is to move a certain distance to a target of a particular.  Well. And uh, so this, this, um, let's was interested in and, and Shannon's law.  Um, and so this fits with Shannon's law that we're measuring kind of the information,  uh, and the amount of information that we need, um, to, to perform this task.  Um, so measured in bits as an information measure.  And it also just tells us how difficult it is to to get somewhere as our index of difficulty increases.  That just means it's harder to get to our target. Yeah.  And so we can use that index of difficulty, um, to understand on a screen layout, on a mobile phone layout,  just how difficult it will be to get from one place to another, place to reach a target of a certain size.  And, uh, and we can use that index of difficulty to make decisions about the layouts that, that we have.  So that tells us some things about how we might approach design as well, and things that we might want to consider when we're doing design.  So if we're thinking about I agree with the mouse control,  then there are certain things that that gives us or tells us immediately about what we can do without design.  And one of those things is this notion of a prime pixel and the prime pixel.  Um, yeah. You can see where my pointer is.  Prime pixel is underneath that pointer. And why is that useful?  How long does it take me to get to underneath my pointer? It takes no time at all.  Yeah. So I'm there already. And so the prime pixel is as a really useful concept.  And the reason that, uh,  that we do certain things like have pop up menus that appear where the pointer is because it takes no time to get to that menu,  no time to pop up that menu because it's right underneath my pointer.  No matter where my point tries. So we have, um, have the ability to use that information to make decisions about the design that we have.  And so that prime pixel position changes as people work with the software that they have.  So as they move from field to field to field, um, then that location changes.  But again, we can use that information to say, okay, I know where the pointer is because I had to point,  I have to click a button or they had to do something on this field.  Uh, what does that mean about where I'm placing the other information around that?  Either information that they have to consume, understand, look at uh,  or other aspects of components of the screen that are going to be close to that, the next step they have to undertake in the process.  Um, then I know where they are on the screen. I know what I can, what I should be providing them so that they can be effective and using the screen.  When people don't know where the prime pixel is. So when you first start an application, usually they kind of estimate about the middle of the screen.  So Google search bar is, you know, not at the very top of the screen.  It's kind of centred in the screen that comes up. That's where people think they are likely to be starting.  Okay. So prime pixel really useful and and we can make decisions about what we put around  that and and where it is and what that means in terms of the flow of our application.  Uh, the other one, which is of interest, uh, uh, the metric pixels, not very metric, uh, because we know where they are and we know what they do.  Uh, but the pixels in the far corners of our screen.  And so this is only true when we're using a mouse and a gooey, because it's not true when I'm using my mobile or tablet or other devices.  But when I move the cursor up to the corner, as you know, it doesn't go past the corner stops.  So I can move as fast as I want. I don't have to slow down.  I don't have to do anything to attain the target there, because the cursor is going to stop at that corner.  So that means I can attain those corners very quickly. And we should take advantage of that.  And different operating systems do take advantage of that.  Down in the corner here you'll see Microsoft have um have this start menu.  Right. So you can obtain that very quickly.  They put it in the fastest place any user can get to on the screen, because they want to make that easily accessible to anyone.  So the corners are really, really useful because we can get to them very quickly.  Why don't people use them all? There's only one useful thing in the corner on the screen.  There's three more corners I could get to really quickly. I don't know.  Any ideas? Why don't people do that?  So the other aspect of that so we can get to the corners really fast, but we can also get to the edges almost as fast.  We can get to something on the edge almost as fast because they have the same thing.  Okay. I'm not going to go off the edge of the screen. It stops.  So I again, I can move very quickly to the edge of the screen.  What I can't do on the edge of a screen is accurately get to any of the particular icons here.  Yeah. So I can move down very quickly. But I still have to attain the target somewhere along the edge of the screen.  Okay. So again, it's fast. Not as fast as the corners.  And again people take advantage of that. Okay.  I have all of these icons along the bottom that I can access very quickly because I can get to the bottom of my screen quickly.  And, and it's a little bit slower to get to the right icon, but I can still obtain that faster than if I had it somewhere else on the screen.  Yeah. So having a window with icons on it, that's more difficult because nothing stops me going past the window.  I have to attain that target. And and Fitts law applies to that.  And so I have that full time to attain a target based on tips for when I'm going somewhere on a window.  Okay. On Apple computers for those people lucky enough to have Apple computers.  Um, Apple has has icons along the very top.  Yeah. And so you can access those icons very, very quickly.  No one else has that. Why is that?  Well, Apple have this patent which says putting icons across the top of the screen is something that that is this, uh, that we can do.  And, and so they have patent on that. And no other companies seem to have either wanted to pay for it.  Uh, or, or Apple hasn't let them do that.  So, uh, you'll see only Apple computers have have that ability, uh, because of, of that patent.  One of the reasons that we think patents are bad and software companies change it and possibly.  I'm not sure. Can you? I think you can. Yeah. Yeah. Okay.  This is me. This is me. Apple has a patent, which is fine.  Yes. They have discovered that you can put things along your top of the screen.  That means the Linux community is violating that patent unless they paid something.  Yeah. So. So usually you can pay, you know, to use someone's patent.  Yeah. This kid's collaborating with Apple closely on one case.  Uh, someone who was originally from Linux. Oh, okay.  So maybe Apple would be nice to them. Yeah. Okay.  So. So that notion of places that we can get to fast and say and it works and we're using a mouse and uh, gooey doesn't work on my screen.  Yeah. Because my finger can go off the edge. I still have to obtain targets on this.  So there's no no buffer that stop my finger going beyond the edge of my mobile or a tablet for when I'm using a pen or any of those devices.  Okay, so it's a very special case, but it's a case that happens a lot because most of us use mouse or mouse analogue.  Uh, on a, on a screen. And we have that constraint on what's allowed to happen on, on the screen.  Okay. And well, I put a screen up in case I couldn't see a screen, um, just to show you what it is.  But I think we've talked about that. Okay so how is fits for changed what we do or what we see.  And so the influences of of Fitz Law. So they say a lot of things.  And these are not always followed. But what the implication should be is that you shouldn't have really long dropdown lists.  Yeah. Because you can access the first few items fairly quickly.  But the items down the bottom of that list are going to take you quite some time to acquire.  Yeah. So you'll see a number of applications have fairly short drop down lists.  And that's because they're taking Fitts law into account in the design that they're having.  It should also mean that you put the most used items at the top of your drop down list.  So again, people can get the most important, the most used item for any menu very very quickly.  And again, that's what you want to do to make things more effective.  Anyone remember what Microsoft did about ten years ago where they they rearranged the drop down menus based on what you did previously?  No one lived through that era. That was terrible.  So they kept on changing the menu, the drop down menus depending on how often you use particular functions.  It means that every time you access the drop down menu, you didn't know what function was going to be in what order on the menu.  And that violates other heuristics that we have about consistency.  So you learn where things are and you learn what you need to do.  But if they keep on changing you, you can't use that learning to access that particular function.  So you have. The influencers.  So right click to pop up a menu that's fairly prevalent.  And lots of the software that we use now. You know I'd use an application that has a pie menu.  So pi minus, pi minus. Put the options in a circle around the point that you're clicking on.  And the reason to do that? What's the reason to do that?  Pitts, law says old Fitz will say about having a circle of items around the point that you're at.  Absolutely the same time to get to every single item. Yeah.  So minimise the amount of time for every item that that you have.  Sounds super. No one uses a why why why does no one user.  I don't know the answer to these.  I don't know, it's kind of like hard to look at like eight different things in a circle at once, whereas if it's almost.  I would guess. That's right. Yeah, that it's the way that people perceive information that perhaps it's more difficult.  I'd reckon that if everyone use point menus,  people get really used to pie menus and probably be able to access them just as fast, but I don't know, the said.  Hmm. We should know the exact pixels. Yeah.  And they put things in a to make it easier because for I use the movie list twice.  Yeah. Make it easier to put it in a list.  Uh, setting in that kind of thing. Okay. Yeah.  So in the Vision Pro, the updated probably. That is very good.  One application out of , applications.  I think it looks like a pretty real thing because when we,  we make a certain amount of memory either from top to bottom or something because custom detects behaviour.  So let me see like a pie format instead of like putting it in a circle.  We're not used to that. Yeah that's right you know. Yeah.  Do you think you could learn to do it? Yes. Yeah, you could learn it.  But then, since I'm more used to talk to my.  Yeah. So for example, or what a painting applications or sculpting applications, they use the pie menu because it's impossible.  Like it's so bad to use the other ones because they need to be changing.  Like when you're painting, you're not painting with the same brush.  You need to change textures. You need to change with one click.  So they have to get used to it.  Like there was like you have to learn this and when you're like this, you and they do that, I guess with documents is not as easy to be changing.  So lot. Yeah. So you guys changed my mind.  Uh, plant menus are not really popular because software engineers are on.  That's because there's no API support for most families, like windows phones.  Doesn't come with. I guess that's why people are not using it.  That's, uh. Good. We can blame the software engineers.  I would say that. Using the environment.  If you're not like me, you flash on the hierarchy and you lose the ability to say these things off the top.  I think I've done. So it's up to you if you want to get involved in that.  What do you want to? After. Yeah, I can see it.  So, yeah, I think there's been some good arguments for why why we don't use them.  Um, I think in new, uh, the would be, uh, application, particularly when you're using a controller to select from, from a menu.  They use a finding. Mhm. Yeah. So uh, so, so yeah the new a new applications in VR seems.  And again perhaps that's the controller. The ability of the controller makes it better suited to that sort of layout.  Okay. So yeah, this is a segue into pie menus.  If I know now we trying to work out how they can put pie menus into their applications.  I look forward to that. Um, so this law says big targets.  Yeah. So I think the mantra is the bigger the target, the better, right.  Because, uh, fit. So it just says the bigger the width but faster it is to get to it.  So just keep on making it bigger and bigger and bigger. Right.  But we can't do that, Cameron. How big? How big can we get?  You're not gonna have a button that takes the whole screen. That'd be awesome, right?  So how big? With WWE's limit on. On big.  I mean this is a log function. So, you know, it's it's not getting faster linearly.  It's getting faster at a log. Right. So that says that yes, it's always going to be faster the bigger you make it.  But that's going to drop off for the benefit that you're getting drops off at a certain point.  And so one of the things that you might do with that is, well, you look at at the error rate then, um,  when people are trying to obtain that target, look at how often they, they, um, overshoot the target for miss the target.  Yeah. And, and so the bigger it is, the less that people will overshoot.  And so you'll get a lower error rate.  And so you can look at the error rate as you're testing an application and say, well,  okay, you know I'm happy at this point, uh, in terms of, of the error rate that we have.  Lots of icons have labels on them. Not just doing that to make it easy to know what the icon is.  That makes the icons bigger, so clickable. So you get a larger target, and so it's easier to obtain that target when when you have a label on it.  If the label was clickable. Right. So influence on on the types of icons that we have.  Um, the reason that we put things close together. Well, most applications put things close together and follow the flow is so that you can reduce the  amount of time it takes to get from one part of the process to the next part of the process.  Not everyone does that.  I've been using a form, uh, for doing reviews of, of, uh, journal, and uh, the submit button is right at the top or right at the bottom.  Um, but you throw stuff in the middle and you either have to scroll up or scroll right to the bottom to get to the submit button.  It just doesn't fit the process. Thank you. Terrible design.  Um, and we'd also look to minimise the distance from where people have their focus at a particular time.  Yeah. So getting that prime pixel, we know where someone is working.  We provide information around that.  We provide the next step in a process around that, so that there's a smaller distance from that point to where they need to be next.  I would say these sorts of cascading menus are not a good idea.  Okay. Hard to obtain multiple, um, items in a cascading menu.  As you go to one point, try and get across to the next point.  Um, I'm sure if you've used these, if you're like me, I keep on triggering, uh, another item in the menu,  which brings up something that I don't want to get to as I try and move across to the next item in the cascading menu.  But they're quite popular. Um. With.  Um, see that problem you just talked about in.  You go across to the next meeting, you like left down the bottom, and you try to go right across the way.  And sometimes that means that you draw a triangle. So if you're.  Anything that makes me of, uh. Um. I consider that to.  I can talk to the occupants. Yeah.  So again, yes, there's I think we talk about in the interaction design a lot of these things are solvable.  You know and and to solve them requires more developer time.  And often that's a trade off that people make between human user time and developer time.  And we often minimise the developer time because because that's the cost of the software.  And we think that's a good trade off to make and then causes much more time for the users.  And in reality, that's the bigger cost than the developer time.  But yes, there are there can be solutions to this. Most things don't do that.  So I've been involved. Um, some of this is on me.  Um, this is a project I've been involved with.  We've put up a, uh, developed a website for using particular type of software for health and safety and construction and, uh,  and this is, uh, cascading menu that they have and I have argued against it, uh, because it is not a very nice implementation.  It causes the errors. I'm, I was describing, um, but the designers like it.  Okay, so other influences, uh, infinite targets, long edges.  We talked about that. So, uh, we get to age as fast, so we put things on on the ages.  Uh, because we get down fast, but we still have to take a little bit of time to,  to acquire the actual target or things in the corner, which take very little time at all, because we can get to corners fast.  Um. Yeah. So what was your suggestions?  You were up against? That was good management. Yeah I don't think.  No. So again it's designed. How what what do you put in front of the user.  And I think you can. I mean instead of having cascading menus, you can have another screen with another selection in it,  which reduces the need to have a cascade and reduces the possibility of an error.  I think you'd look at the trade off between how often do people make errors?  If a with a cascading menu versus potentially slightly longer time to to access.  If you provided someone with a progression of screens.  And and as we know in HCI most of these things are trade offs.  Yeah we're always trading off precision.  This is time to develop versus accuracy versus some some other aspect.  So one other thing you might think it says you might get from this law is that we should put everything really close together.  And that's only partially true, because remember,  when we're talking about pets or we're talking about time to attain the target, but not everyone attains the target perfectly.  Okay. So we have this error rate where people overshoot undershoot.  Okay. They missed the target. And click beyond the target before or after.  And. And so you see most of our layouts we have a little bit of space between each of the icons.  You know we don't have icons right against each other which we could do.  And that gives us a way of of helping ensure that when someone misses a target, they don't invoke a function that they didn't want to to invoke.  Yeah.  So when when you're looking at this target, you know, you're seeing, um, the green part of it not seeing the visible clickable area around the target.  So when you're trying to attain the target, you're trying to obtain the visible portion of it.  And so if you do overshoot, undershoot and click, you're still likely to be hitting the target that you're aiming for.  Okay. So, uh, close together means faster.  Um, but but then too close together probably means that your error rate goes up in terms of invoking functions you didn't want.  Not exactly fits all, but colourful. These head of targets and in lots of applications.  He's heading around items there, the headings invisible so you don't know where it does.  You can't take it into account when you're trying to attain a target.  Yeah. So when if we had a box around the actual like this highlighted one around the target,  then we would we would reach that target in a different time because we're aiming for a target of a different width.  Yeah. So the actual target width is, is what's shown in the box.  So when you're trying to obtain this target, you're aiming for a target of the width of what's drawn there.  Again. So these invisible, um areas, padded areas around the targets, um, don't help us in getting a faster time to target.  They help us with the area, right. But they don't make it easier to get to the target.  And I guess the other thing that that influences is if you don't want someone to do something, you know, make it small.  Yeah, make it really small so they can't get to it.  So you might not want people to to ring the helpline and make the helpline think you're quite small.  Yeah. If you don't want people to use the search and then make the search or the,  or the other, um, access point small, make the things that you want them to use larger.  And so people will look at the larger items and access the larger items and not the smaller ones.  Okay, a couple of things that Fitzroy doesn't tell us.  So, um, first of all, models, continuous movements are going from one place to another place as a single movement.  It doesn't doesn't model, uh, if we are moving around something, uh, or, you know, so this all works in the physical world as well.  So if we in the physical world have to go around something.  Well, it doesn't tell us anything about how we go around things.  It doesn't tell us anything about using two hands with two devices.  So if I'm using gestures, um, then the gestural interface still follows Fitts law if I'm just using one hand for gesture,  but if I'm using two handed gestures, then I don't get a good answer from Cutler as to how long it would take me to obtain a particular target.  If I'm using one hand to bring up the target, another one to point to it, I don't have a good way of of doing that calculation.  Um, and there is actually a difference between the direction that you're moving objects whole and extensor movements.  And so, um, yeah, that that's not taken into account, but it's, it's not a huge difference.  So for most people it doesn't matter too much. Um, I mean, I guess thinking a little bit ran the test.  Um, so for the test will give you the hits or give you the ID or give you the function so you don't have to memorise them.  But that's it's not a big function, so you can probably memorise it.  Um. So that means that you need to manipulate it in some way.  And so the sorts of things that one might want to know or ask about as well.  Uh, what do you have to do if you want to maintain the same time to target when you change the distance or you change the width?  Uh. And so you can look at Fitz.  You can see that if you want to maintain the same time to target,  then if you double the distance to the target, you need to double the width of the target.  Yeah. And if I want half the time to target, if I half the distance, I have to half.  What if I have to? What? So I have to half the distance.  Yeah. So that just close for everything that you want to do.  It gets more difficult when I ask the question, what if he wants a half the time to target?  Halving the time to the target then takes into the into account the A and B factors,  and we have to do a a more complex calculation to work out, um, what the distance or width is going to be to half the time or double the time.  Yeah. But again, it's a manipulation of that formula. Um.  If I asked you to find the the values A and B, which I will do in the test.  So if I give you two times to target and say, here's the distance and here's the width, how do you find out a and B.  It takes a little bit of work. Simultaneous equation. Uh, you have the time.  You have, uh, the id. Uh, so you have two equations with A and B factors in them, and you just have to solve them simultaneously.  But good thing to practice because there will be a question like that the next.  Huh? His look. Any questions on first of.  I think that slaw is really cool. I think that's cool.  That's log to get to log. Time to get to something.  I think that's that's just amazing that we as humans has or I guess,  or animals have developed this ability to attain a target where, where we can do it very quickly over a long distance.  Yeah. Because we are just this log function, throw out our arm out at great speed.  We're tracking that the position of,  of our fingers or mouse or whatever it does as we're doing that and we slow it down as we get closer to the target.  That's just just very, very clever.  Same with Simon Moore. I think that's amazing. To me, that was more more like magic that it's log time to, uh, to make a decision from,  you know, items that those items are in, in some sort of divine order.  Yeah. So again, we don't scan the list from top to bottom. We have the days of the week.  We can go to the item we want to. What time. Incredible.  We're really clever. Hey, any other questions on this?  So about a quarter of the test.  So four weeks worth of, uh, content in the test means that a quarter of the test is going to be on this week and three quarters on pye's work.  Uh, and so got a quarter of the questions are going to focus around around fit, small implications of the fit law and calculations on.
